<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacestrutil" kind="namespace" language="C++">
    <compoundname>strutil</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacestrutil_1a8f8315af1a49ef03bf586abf2a82c112" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string strutil::to_string</definition>
        <argsstring>(T value)</argsstring>
        <name>to_string</name>
        <qualifiedname>strutil::to_string</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts any datatype into std::string. Datatype must support &lt;&lt; operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- will be converted into std::string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted value as std::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="39" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1abe0992e7d5b58115e993ad52fc975d24" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T strutil::parse_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>parse_string</name>
        <qualifiedname>strutil::parse_string</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts std::string into any datatype. Datatype must support &lt;&lt; operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be converted into datatype T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Variable of datatype T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="55" column="21" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a4ba3a5b76e6bbdada7bc28bd83a955c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::to_lower</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_lower</name>
        <qualifiedname>strutil::to_lower</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts std::string to lower case. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that needs to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lower case input std::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="68" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a99c26b04a6071305f73a7ec5fa7f3ee6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::to_upper</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>to_upper</name>
        <qualifiedname>strutil::to_upper</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts std::string to upper case. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that needs to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Upper case input std::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="84" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1afa66ee9430a5d47f45f3466dfd03ece3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::capitalize</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>capitalize</name>
        <qualifiedname>strutil::capitalize</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts the first character of a string to uppercase letter and lowercases all other characters, if any. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input string to be capitalized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string with the first letter capitalized and all other characters lowercased. It doesn&apos;t modify the input string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="100" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1aeb90b538543a3d98eec7a5de1f32d288" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::capitalize_first_char</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>capitalize_first_char</name>
        <qualifiedname>strutil::capitalize_first_char</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts only the first character of a string to uppercase letter, all other characters stay unchanged. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input string to be modified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string with the first letter capitalized. All other characters stay unchanged. It doesn&apos;t modify the input string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="116" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1afd6f761bacbf437c0534149d607e7776" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::contains</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;substring)</argsstring>
        <name>contains</name>
        <qualifiedname>strutil::contains</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substring</declname>
        </param>
        <briefdescription>
<para>Checks if input std::string str contains specified substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substring</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched substring. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if substring was found in str, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="133" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a7cdb5027234698994b95fcdbb2fa5fe1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::contains</definition>
        <argsstring>(const std::string &amp;str, const char character)</argsstring>
        <name>contains</name>
        <qualifiedname>strutil::contains</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Checks if input std::string str contains specified character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>character</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if character was found in str, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="144" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a3c7ac5a89f054a1bcee371e64c6cf953" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::compare_ignore_case</definition>
        <argsstring>(const std::string &amp;str1, const std::string &amp;str2)</argsstring>
        <name>compare_ignore_case</name>
        <qualifiedname>strutil::compare_ignore_case</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compares two std::strings ignoring their case (lower/upper). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if str1 and str2 are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="155" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1aee34ef55f923ac8d0c4029b9ba419316" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void strutil::trim_left</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>trim_left</name>
        <qualifiedname>strutil::trim_left</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims (in-place) white spaces from the left side of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="165" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a37265467aaf1644efe8a08187856c473" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void strutil::trim_right</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>trim_right</name>
        <qualifiedname>strutil::trim_right</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims (in-place) white spaces from the right side of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="175" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1ad14bdffa299dfe752668fbea0896f002" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void strutil::trim</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>trim</name>
        <qualifiedname>strutil::trim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims (in-place) white spaces from the both sides of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="185" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1af18f874cad7ad6dd0b900e41660ba3a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::trim_left_copy</definition>
        <argsstring>(std::string str)</argsstring>
        <name>trim_left_copy</name>
        <qualifiedname>strutil::trim_left_copy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims white spaces from the left side of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of input str with trimmed white spaces. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="197" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1ae9fd5fdaa554d2b32d8bb5d3bf26204b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::trim_right_copy</definition>
        <argsstring>(std::string str)</argsstring>
        <name>trim_right_copy</name>
        <qualifiedname>strutil::trim_right_copy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims white spaces from the right side of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of input str with trimmed white spaces. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="209" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a8364d95d72f1284b0dc385a3cb4580b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::trim_copy</definition>
        <argsstring>(std::string str)</argsstring>
        <name>trim_copy</name>
        <qualifiedname>strutil::trim_copy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trims white spaces from the both sides of std::string. Taken from: <ulink url="http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring">http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string to remove white spaces from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of input str with trimmed white spaces. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="221" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a32d0f61b379038b4e149b267e45a63b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::replace_first</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;target, const std::string &amp;replacement)</argsstring>
        <name>replace_first</name>
        <qualifiedname>strutil::replace_first</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Replaces (in-place) the first occurrence of target with replacement. Taken from: <ulink url="http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string">http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will be replaced with replacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will replace target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if replacement was successfull, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="235" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="235" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a2354e970f74c4e3c485dd076aa313e23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::replace_last</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;target, const std::string &amp;replacement)</argsstring>
        <name>replace_last</name>
        <qualifiedname>strutil::replace_last</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Replaces (in-place) last occurrence of target with replacement. Taken from: <ulink url="http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string">http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will be replaced with replacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will replace target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if replacement was successfull, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="255" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a78c4e052b45ff5f4d007cfaa36916026" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::replace_all</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;target, const std::string &amp;replacement)</argsstring>
        <name>replace_all</name>
        <qualifiedname>strutil::replace_all</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Replaces (in-place) all occurrences of target with replacement. Taken from: <ulink url="http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string">http://stackoverflow.com/questions/3418231/c-replace-part-of-a-string-with-another-string</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will be replaced with replacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that will replace target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if replacement was successfull, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="275" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="275" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a70b6dcf2f53bfce25c924ca73da1e6b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::ends_with</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;suffix)</argsstring>
        <name>ends_with</name>
        <qualifiedname>strutil::ends_with</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Checks if std::string str ends with specified suffix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched suffix in str. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if suffix was found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="300" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="300" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a8795895d819237afb982942cf2f299e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::ends_with</definition>
        <argsstring>(const std::string &amp;str, const char suffix)</argsstring>
        <name>ends_with</name>
        <qualifiedname>strutil::ends_with</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
<para>Checks if std::string str ends with specified character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched character in str. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if ends with character, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="313" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a11f91b3041ce16b8420dedd881eade02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::starts_with</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;prefix)</argsstring>
        <name>starts_with</name>
        <qualifiedname>strutil::starts_with</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Checks if std::string str starts with specified prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched prefix in str. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if prefix was found, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="324" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1afb259137f8febe8aa846b4946ffe08b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::starts_with</definition>
        <argsstring>(const std::string &amp;str, const char prefix)</argsstring>
        <name>starts_with</name>
        <qualifiedname>strutil::starts_with</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Checks if std::string str starts with specified character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- input std::string that will be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>- searched character in str. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if starts with character, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="335" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1ad4c189cab8456d0e369b21bb9c555a78" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; strutil::split</definition>
        <argsstring>(const std::string &amp;str, const char delim)</argsstring>
        <name>split</name>
        <qualifiedname>strutil::split</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Splits input std::string str according to input delim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be splitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>- the delimiter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; that contains all splitted tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="346" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="346" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a39febff1a003ebd7f53153fb2a41e50f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; strutil::split</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delim)</argsstring>
        <name>split</name>
        <qualifiedname>strutil::split</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Splits input std::string str according to input std::string delim. Taken from: <ulink url="https://stackoverflow.com/a/46931770/1892346">https://stackoverflow.com/a/46931770/1892346</ulink>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be split. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>- the delimiter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; that contains all splitted tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="372" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="372" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a307dfd0713e57e20ebf78c2d84c3318a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; strutil::regex_split</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;rgx_str)</argsstring>
        <name>regex_split</name>
        <qualifiedname>strutil::regex_split</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rgx_str</declname>
        </param>
        <briefdescription>
<para>Splits input string using regex as a delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be split. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgx_str</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of delimiter characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of resulting tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="395" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="395" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1ae2e7549bd35da7ab77951eaa5dbf6cc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>static std::map&lt; std::string, std::string &gt; strutil::regex_split_map</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;rgx_str)</argsstring>
        <name>regex_split_map</name>
        <qualifiedname>strutil::regex_split_map</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rgx_str</declname>
        </param>
        <briefdescription>
<para>Splits input string using regex as a delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be split. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>- map of matched delimiter and those being splitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgx_str</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of delimiter characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the parsing is successfully done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="416" column="28" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="416" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a66fdf6c002d691c0f84537e38d8678aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; strutil::split_any</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;delims)</argsstring>
        <name>split_any</name>
        <qualifiedname>strutil::split_any</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Splits input string using any delimiter in the given set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string that will be split. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delims</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of delimiter characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of resulting tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="441" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="441" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1adeb7c29f294936d2ad6f48582c3f13a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string strutil::join</definition>
        <argsstring>(const Container &amp;tokens, const std::string &amp;delim)</argsstring>
        <name>join</name>
        <qualifiedname>strutil::join</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Joins all elements of a container of arbitrary datatypes into one std::string with delimiter delim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>- container type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>- container of tokens. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>- the delimiter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string with joined elements of container tokens with delimiter delim. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="470" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="470" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a4d0a00f3b4e037d358c091c839d50edf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, typename... &gt; typename</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void strutil::drop_empty</definition>
        <argsstring>(Container&lt; std::string, Args... &gt; &amp;tokens)</argsstring>
        <name>drop_empty</name>
        <qualifiedname>strutil::drop_empty</qualifiedname>
        <param>
          <type>Container&lt; std::string, Args... &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Inplace removal of all empty strings in a container of strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>- container type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>- container of strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="492" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a7dc88dee8c7e75a09a0cb5ecd2ed1ca1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, typename... &gt; typename</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>Container&lt; std::string &gt;</type>
        <definition>static Container&lt; std::string &gt; strutil::drop_empty_copy</definition>
        <argsstring>(Container&lt; std::string, Args... &gt; tokens)</argsstring>
        <name>drop_empty_copy</name>
        <qualifiedname>strutil::drop_empty_copy</qualifiedname>
        <param>
          <type>Container&lt; std::string, Args... &gt;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Inplace removal of all empty strings in a container of strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>- container type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>- container of strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>container of non-empty tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="504" column="29" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="504" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1acb28b5a1d5e9bcce7c9d34c127c6ead5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void strutil::drop_duplicate</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;tokens)</argsstring>
        <name>drop_duplicate</name>
        <qualifiedname>strutil::drop_duplicate</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Inplace removal of all duplicate strings in a vector&lt;string&gt; where order is not to be maintained Taken from: C++ Primer V5. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- arbitrary datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector of strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of non-duplicate tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="518" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="518" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a761aeaf955f89197215784619eca8305" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>static std::vector&lt; T &gt; strutil::drop_duplicate_copy</definition>
        <argsstring>(std::vector&lt; T &gt; tokens)</argsstring>
        <name>drop_duplicate_copy</name>
        <qualifiedname>strutil::drop_duplicate_copy</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Removal of all duplicate strings in a vector&lt;string&gt; where order is not to be maintained Taken from: C++ Primer V5. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- arbitrary datatype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector of strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of non-duplicate tokens. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="533" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="533" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a04c5451f539eb62260dfda54d3aab4d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::repeat</definition>
        <argsstring>(const std::string &amp;str, unsigned n)</argsstring>
        <name>repeat</name>
        <qualifiedname>strutil::repeat</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Creates new std::string with repeated n times substring str. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- substring that needs to be repeated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- number of iterations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string with repeated substring str. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="547" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="547" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1ae39201c266c1d61d772b5026e723af7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string strutil::repeat</definition>
        <argsstring>(char c, unsigned n)</argsstring>
        <name>repeat</name>
        <qualifiedname>strutil::repeat</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Creates new std::string with repeated n times char c. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>- char that needs to be repeated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- number of iterations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string with repeated char c. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="565" column="31" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a8abfba142b0e465d6c6e2981797f9963" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool strutil::matches</definition>
        <argsstring>(const std::string &amp;str, const std::regex &amp;regex)</argsstring>
        <name>matches</name>
        <qualifiedname>strutil::matches</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::regex &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
<para>Checks if input std::string str matches specified reular expression regex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::string to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regex</parametername>
</parameternamelist>
<parameterdescription>
<para>- the std::regex regular expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if regex matches str, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="576" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1afc8cde77476742086e1577141ae93053" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void strutil::sorting_ascending</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;strs)</argsstring>
        <name>sorting_ascending</name>
        <qualifiedname>strutil::sorting_ascending</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>strs</declname>
        </param>
        <briefdescription>
<para>Sort input std::vector&lt;std::string&gt; strs in ascending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strs</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::vector&lt;std::string&gt; to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="586" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a64ccd1da558200d2663be9052ec31968" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void strutil::sorting_descending</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;strs)</argsstring>
        <name>sorting_descending</name>
        <qualifiedname>strutil::sorting_descending</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>strs</declname>
        </param>
        <briefdescription>
<para>Sorted input std::vector&lt;std::string&gt; strs in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strs</parametername>
</parameternamelist>
<parameterdescription>
<para>- std::vector&lt;std::string&gt; to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="596" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1a2d9b94dbda3d9296f26b1169fe8a343e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void strutil::reverse_inplace</definition>
        <argsstring>(Container &amp;strs)</argsstring>
        <name>reverse_inplace</name>
        <qualifiedname>strutil::reverse_inplace</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>strs</declname>
        </param>
        <briefdescription>
<para>Reverse input container strs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strs</parametername>
</parameternamelist>
<parameterdescription>
<para>- container to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="606" column="24" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespacestrutil_1abcb8d647a058142a8e1374f5f579946c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>Container</type>
        <definition>static Container strutil::reverse_copy</definition>
        <argsstring>(Container strs)</argsstring>
        <name>reverse_copy</name>
        <qualifiedname>strutil::reverse_copy</qualifiedname>
        <param>
          <type>Container</type>
          <declname>strs</declname>
        </param>
        <briefdescription>
<para>Reverse input container strs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strs</parametername>
</parameternamelist>
<parameterdescription>
<para>- container to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="616" column="29" bodyfile="E:/dev/c++_libs/ConfigParser/src/strutil.h" bodystart="616" bodyend="620"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The strutil namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/dev/c++_libs/ConfigParser/src/strutil.h" line="29" column="1"/>
  </compounddef>
</doxygen>
