<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="class_config_parser_1_1_config_value" kind="class" language="C++" prot="public">
    <compoundname>ConfigParser::ConfigValue</compoundname>
    <includes refid="_config_parser_8hpp" local="no">ConfigParser.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_config_parser_1_1_config_value_1a582526376e6578be2fbf539f59fda637" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string ConfigParser::ConfigValue::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <qualifiedname>ConfigParser::ConfigValue::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="101" column="13" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1ad132f222ee68131fe4b8afb6742e526b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConfigParser::ConfigValue::ConfigValue</definition>
        <argsstring>()</argsstring>
        <name>ConfigValue</name>
        <qualifiedname>ConfigParser::ConfigValue::ConfigValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="104" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="104" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a3969cc0b4dcf2b03335c936e789180bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_type</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ConfigParser::ConfigValue::ConfigValue</definition>
        <argsstring>(value_type _data=&quot;&quot;)</argsstring>
        <name>ConfigValue</name>
        <qualifiedname>ConfigParser::ConfigValue::ConfigValue</qualifiedname>
        <param>
          <type>value_type</type>
          <declname>_data</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="107" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1abfa8a89a0e77ccdbe833afdbd929b397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConfigParser::ConfigValue::~ConfigValue</definition>
        <argsstring>()</argsstring>
        <name>~ConfigValue</name>
        <qualifiedname>ConfigParser::ConfigValue::~ConfigValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="110" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1ad54bdf43bfc5d902a743bae0fe7d84e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_config_parser_1_1_config_value" kindref="compound">ConfigValue</ref> &amp;</type>
        <definition>ConfigValue &amp; ConfigParser::ConfigValue::operator=</definition>
        <argsstring>(value_type value)</argsstring>
        <name>operator=</name>
        <qualifiedname>ConfigParser::ConfigValue::operator=</qualifiedname>
        <param>
          <type>value_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="113" column="13" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1ab0dd3a9705375856d7906018587aa7ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ConfigParser::ConfigValue::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <qualifiedname>ConfigParser::ConfigValue::string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="118" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1aded1f0f9a674fd0966c5861033aebbd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_type</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ConfigParser::ConfigValue::operator value_type</definition>
        <argsstring>()</argsstring>
        <name>operator value_type</name>
        <qualifiedname>ConfigParser::ConfigValue::operator value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="121" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a4e460ff91d62a413729eb1359fcffac2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ConfigParser::ConfigValue::setData</definition>
        <argsstring>(value_type value)</argsstring>
        <name>setData</name>
        <qualifiedname>ConfigParser::ConfigValue::setData</qualifiedname>
        <param>
          <type>value_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="131" column="6" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="131" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_config_parser_1_1_config_value_1a5cb35b580ed7d366e0e9f4f6712ba35c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ConfigValue &amp;cv)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>ConfigParser::ConfigValue::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_config_parser_1_1_config_value" kindref="compound">ConfigValue</ref> &amp;</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="125" column="8" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="125" bodyend="128"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a56e7d54c963fada49ab465f4bb8e22d7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string ConfigParser::ConfigValue::getType</definition>
        <argsstring>(type variable)</argsstring>
        <name>getType</name>
        <qualifiedname>ConfigParser::ConfigValue::getType</qualifiedname>
        <param>
          <type>type</type>
          <declname>variable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="154" column="27" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1ab14ebb7e685972e8082fde83bd90aa46" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string ConfigParser::ConfigValue::typeErrorMsg</definition>
        <argsstring>(const std::string &amp;type)</argsstring>
        <name>typeErrorMsg</name>
        <qualifiedname>ConfigParser::ConfigValue::typeErrorMsg</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="158" column="27" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a70faed41e5334315ec07a087a9763048" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>value_t</type>
        <definition>static value_t ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="160" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a835433d59ab6df4d137d5c36cc656660" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>static int ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="163" column="19" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a914a930a12ec900b04a119866bddb501" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>static float ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="175" column="21" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a1203be5fae492dc7d9702bdf25feb39d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>static double ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="187" column="22" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a07767d588df7a84cd89e9edc9bf2717e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="199" column="20" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="199" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1ad91ec0a57b6af5995f2fe7d917a024b7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>char</type>
        <definition>static char ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="209" column="20" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="209" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1acfcef4c2b39d08229bad424f25be393c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string ConfigParser::ConfigValue::convertString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>convertString</name>
        <qualifiedname>ConfigParser::ConfigValue::convertString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="219" column="27" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_config_parser_1_1_config_value_1a30ed6373f2d75fa68b9a6b820bb27e47" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename value_t</type>
          </param>
        </templateparamlist>
        <type>value_t</type>
        <definition>static value_t ConfigParser::ConfigValue::getStringValue</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>getStringValue</name>
        <qualifiedname>ConfigParser::ConfigValue::getStringValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="229" column="16" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="229" bodyend="251"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for managing value data, handles different DataTypes and uses std::string to store them. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" line="99" column="1" bodyfile="E:/dev/c++_libs/ConfigParser/src/ConfigParser.hpp" bodystart="99" bodyend="254"/>
    <listofallmembers>
      <member refid="class_config_parser_1_1_config_value_1ad132f222ee68131fe4b8afb6742e526b" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>ConfigValue</name></member>
      <member refid="class_config_parser_1_1_config_value_1a3969cc0b4dcf2b03335c936e789180bc" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>ConfigValue</name></member>
      <member refid="class_config_parser_1_1_config_value_1a70faed41e5334315ec07a087a9763048" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1a835433d59ab6df4d137d5c36cc656660" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1a914a930a12ec900b04a119866bddb501" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1a1203be5fae492dc7d9702bdf25feb39d" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1a07767d588df7a84cd89e9edc9bf2717e" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1ad91ec0a57b6af5995f2fe7d917a024b7" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1acfcef4c2b39d08229bad424f25be393c" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>convertString</name></member>
      <member refid="class_config_parser_1_1_config_value_1a582526376e6578be2fbf539f59fda637" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>data</name></member>
      <member refid="class_config_parser_1_1_config_value_1a30ed6373f2d75fa68b9a6b820bb27e47" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>getStringValue</name></member>
      <member refid="class_config_parser_1_1_config_value_1a56e7d54c963fada49ab465f4bb8e22d7" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>getType</name></member>
      <member refid="class_config_parser_1_1_config_value_1ab0dd3a9705375856d7906018587aa7ee" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>operator std::string</name></member>
      <member refid="class_config_parser_1_1_config_value_1aded1f0f9a674fd0966c5861033aebbd4" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>operator value_type</name></member>
      <member refid="class_config_parser_1_1_config_value_1a5cb35b580ed7d366e0e9f4f6712ba35c" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_config_parser_1_1_config_value_1ad54bdf43bfc5d902a743bae0fe7d84e1" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>operator=</name></member>
      <member refid="class_config_parser_1_1_config_value_1a4e460ff91d62a413729eb1359fcffac2" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>setData</name></member>
      <member refid="class_config_parser_1_1_config_value_1ab14ebb7e685972e8082fde83bd90aa46" prot="private" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>typeErrorMsg</name></member>
      <member refid="class_config_parser_1_1_config_value_1abfa8a89a0e77ccdbe833afdbd929b397" prot="public" virt="non-virtual"><scope>ConfigParser::ConfigValue</scope><name>~ConfigValue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
